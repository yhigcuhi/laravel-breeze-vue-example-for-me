# docker compose yml としての書き方の バージョン
version: '3.8'

# 立てるコンテナ一覧
services:
  app:
    # 管理コンテナ名
    container_name: ${APP_NAME}-laravel-app
    # Dockerファイルにて 定義
    build:
      context: .
      dockerfile: ./docker/php/Dockerfile
    # 場所
    volumes:
      - ./laravel-web/:/var/www/html
    ports:
      - 5173:5173
    # DB定義
    environment:
      - APP_NAME=${APP_NAME}
      - APP_URL=${APP_URL}
      - DB_CONNECTION=${DB_CONNECTION}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_DATABASE=${DB_DATABASE}
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
  # Vue Library 開発ようコンテナ
  lib:
    # 管理コンテナ名
    container_name: ${APP_NAME}-vue-lib
    # Dockerファイルにて定義
    build: 
        context: .
        dockerfile: ./docker/vue-lib/Dockerfile
    # 場所
    volumes:
      - ./vue-lib/:/var/www/html
    # PORT = for watch
    ports: 
      - ${LIB_VITE:-3000}:5173
    # コンテナを正常終了するのを防ぐ
    tty: true
  # WEBサーバー (nginx)
  web:
    # 管理コンテナ名
    container_name: ${APP_NAME}-nginx-web
    # Dockerファイルにて 定義
    build:
      context: .
      dockerfile: ./docker/nginx/Dockerfile
    # 利用ポート
    ports:
      - ${WEB_PORT}:80
    # 依存関係 TODO: 管理コンテナ名か?
    depends_on:
      - app
    # 場所
    volumes:
      - ./laravel-web/:/var/www/html
  # DB
  db:
    # postgresql Dockerfileをインポートして設定できるが一旦下記
    image: postgres:13
    # 管理コンテナ名
    container_name: ${APP_NAME}-postgres-db
    hostname: ${DB_HOST}
    ports:
      - ${DB_PORT}:5432
    # postgreSQL へのオプション (PGDATA: データベースの物理的な格納場所の指定 POSTGRES_INITDB_ARGS起動引数)
    environment:
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_DATABASE}
      PGDATA: /var/lib/postgresql/data/pgdata
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    # データ保存場所やログ残す場所:postgresシステムとしてのパス (/var/lib/postgresql/data) (ショートカットリンク先のパス:ショートカットリンクパス)
    volumes:
      - ./db/postgres:/var/lib/postgresql/data
      - ./db/logs:/var/log
  # WEBアプリケーション
